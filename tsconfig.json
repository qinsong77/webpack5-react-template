{
  /* Visit https://aka.ms/tsconfig to read more about this file */
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "target": "es5" /* 指定要编译到的目标ECMAScript版本：'ES3'、'ES5'（默认）、'ES2015'、'ES2016'、'ES2017'、'ES2018'、'ES2019'、'ES2020' 或 'ESNEXT'。 */,
    "module": "esnext" /* 指定要使用的模块系统 */,
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ] /* 编译过程中需要引入的库文件的列表。 */,
    "allowJs": false /* 不允许编译器编译JS，JSX文件 */,
    "noEmit": true /* 不输出文件,即编译后不会生成任何js文件 */,

    "strict": true /* 启用所有严格的类型检查选项。 */,

    "moduleResolution": "node" /** 模块解析策略，ts默认用node的解析策略，即相对的方式导入 */,
    "allowSyntheticDefaultImports": true /* 允许从没有默认导出的模块中默认导入。 这不会影响代码发出，只是类型检查。 */,
    "esModuleInterop": true /* 允许export=导出，由import from 导入 */,

    "noFallthroughCasesInSwitch": true /* 在switch语句中要求处理所有情况，避免出现漏写break导致的错误。 */,

    "resolveJsonModule": true /* 允许导入JSON文件作为模块。 */,
    "isolatedModules": false /* 将每个文件转换为一个单独的模块（类似于 'ts.transpileModule'）。 */,
    "jsx": "react-jsx",

    "skipLibCheck": true /* 跳过对导入的库文件进行类型检查。 */,
    "forceConsistentCasingInFileNames": true /* 禁止对同一文件的大小写不一致地引用。 */,
    "baseUrl": "./src",
    "paths": {
      // 别名 tsconfig-paths-webpack-plugin 自动注入到webpack resolve
      "@/assets/*": ["assets/*"],
      "@/image/*": ["assets/images/*"],
      "@/service/*": ["service/*"],
      "@/components/*": ["components/*"],
      "@/hooks/*": ["hooks/*"],
      "@/store/*": ["store/*"],
      "@/feature/*": ["feature/*"],
      "@/utils": ["utils/index.ts"]
    }
  },
  "include": ["src"],
  /* 不进行类型检查的文件 */
  "exclude": ["node_modules"],
  "references": [
    {
      "path": "./tsconfig.webpack.json"
    }
    //    {
    //      "path": "./tsconfig.spec.json"
    //    }
  ]
}
